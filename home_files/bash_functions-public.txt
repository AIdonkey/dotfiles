# BASH FUNCTIONS (public)

#------------------#
# Section: General #
#------------------#

# Label: Tabs to Spaces
# Description: Converts a file from tab to space indendation.
# Parameters: $1 (required) - The file to convert, $2 (optional) - The number of spaces, default: 2.
function t2s() {
  echo ''

  if [[ "$2" ]]; then
    local number_of_spaces=$2
  else
    local number_of_spaces=2
  fi

  if [[ "$1" ]]; then
    local temp_file=$(mktemp -t tabs_to_spaces) || { echo "ERROR: Unable to create temporary file."; return; }
    expand -t $number_of_spaces "$1" > $temp_file
    cat $temp_file > "$1"
    echo "Converted: $1."
    rm -f $temp_file;
  else
    echo "ERROR: File must be supplied."
  fi

  echo ''
}

#--------------------------------------#
# Section: [curl](http://curl.haxx.se) #
#--------------------------------------#

# Label: Curl Inspect
# Description: Inspect remote file, via curl, within default editor.
# Parameters: $1 (required) - The URL.
function curli() {
  echo ''

  if [[ "$1" ]]; then
    local file=$(mktemp -t suspicious_curl_file) || { echo "ERROR: Unable to create temporary file."; return; }
    curl --fail --silent --show-error --location "$1" > $file || { echo "Failed to curl file"; return; }
    $EDITOR -w $file || { echo "Unable to open temporary curl file"; return; }
    rm -f $file;
  else
    echo "ERROR: URL must be supplied."
  fi

  echo ''
}

#--------------------------------------------------#
# Section: [lsof](http://people.freebsd.org/~abe/) #
#--------------------------------------------------#

# Label: Port
# Description: Lists file activity on a given port.
# Parameters: $1 (required) - The port number.
function port() {
  echo ''

  if [[ "$1" ]]; then
    sudo lsof -i :$1
  else
    echo "ERROR: Port number must be supplied."
  fi

  echo ''
}

#------------------------------------#
# Section: [Git](http://git-scm.com) #
#------------------------------------#

# Label: Git Root
# Description: Changes to project root directory (regardless of current depth).
function groot() {
  cd "$(dirname $(git rev-parse --git-dir))"
}

# Label: Git Authors (all)
# Description: Answers author commit activity per project (ranked highest to lowest).
function guthorsa() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [[ -d ".git" ]]; then
        # Print project (cyan) and message (white).
        echo -e "\033[36m${project:2}\033[m"
        git log --format="%an" | sort | uniq -c | sort --reverse
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Status (all)
# Description: Answers the status of projects with uncommited/unpushed changes.
function gsta() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [[ -d ".git" ]]; then
        # Capture current project status info as an array.
        local results=(`git status --short --branch`)
        local size="${#results[*]}"

        # Print project name and Git activity only if Git activity is detected.
        if [[ $size -gt '2' ]]; then
          # Output project name in cyan color.
          echo -e "\033[36m${project:2}\033[m"

          # Remove first and second elements since they contain branch info.
          results=("${results[@]:1}")
          results=("${results[@]:1}")

          # Default initial printing of new line to false.
          local newline=0

          # Print results.
          for line in "${results[@]}"; do
            if [[ $newline == 1 ]]; then
              echo "$line"
              newline=0
            else
              echo -n "$line "
              newline=1
            fi
          done
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Churn
# Description: Answers the commit churn for project files (sorted highest to lowest).
function ghurn() {
  git log --all --find-renames --find-copies --name-only --format='format:' "$@" | \
    sort | \
    grep --invert-match '^$' | \
    uniq -c | \
    sort | \
    awk '{print $1 "\t" $2}' | \
    sort --general-numeric-sort --reverse | \
    more
}

# Label: Git Blame Log
# Description: Answers the blame log (i.e. commit notes) for a specific file and lines (optional).
# Parameters: $1 (required) - The file path, $2 (optional) - The file lines (<start>,<end>).
function glamelog() {
  if [[ -z "$1" ]]; then
    echo -e "\nERROR: File path must be supplied.\n"
    return 0
  fi

  if [[ -n "$2" ]]; then
    local blame_hashes=$(git blame -l -L $2 "$1" | awk '{print $1}')
  else
    local blame_hashes=$(git blame -l "$1" | awk '{print $1}')
  fi

  local log_format="%C(yellow)%H%C(reset) %C(bold blue)%an%C(reset) %s%C(bold cyan)%d%C(reset) %C(green)(%cr)%C(reset) %n%b"
  git show --shortstat --pretty=format:"$log_format" $blame_hashes
}

# Label: Git Get Config Value (all)
# Description: Answers key value for all projects in current directory.
# Parameters: $1 (required) - The key name.
function ggeta() {
  echo ''

  if [[ "$1" ]]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git enabled.
        if [[ -d ".git" ]]; then
          # Get Git config value for given key.
          local result=$(git config "$1")

          # Print project (cyan) and message (white).
          echo -e "\033[36m${project:2}\033[m: $result"
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Key must be supplied."
  fi

  echo ''
}

# Label: Git Email
# Description: Answers user email for current project.
function gail() {
  if [[ -d ".git" ]]; then
    git config user.email
  fi
}

# Label: Git Email (all)
# Description: Answers user email for all projects in current directory.
function gaila() {
  ggeta "user.email"
}

# Label: Git Set Config Value (all)
# Description: Sets key value for all projects in current directory.
# Parameters: $1 (required) - The key name, $2 (required) - The key value.
function gseta() {
  echo ''

  if [[ "$1" && "$2" ]]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git enabled.
        if [[ -d ".git" ]]; then
          # Set key value for current project.
          git config "$1" "$2"
          # Print project (cyan) and email (white).
          echo -e "\033[36m${project:2}\033[m: $1 = $2"
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Key and value must be supplied."
  fi

  echo ''
}

# Label: Git Email Set (all)
# Description: Sets user email for all projects in current directory.
# Parameters: $1 (required) - The email address.
function gailsa() {
  gseta "user.email" "$1"
}

# Label: Git Unset (all)
# Description: Unsets key value for all projects in current directory.
# Parameters: $1 (required) - The key name.
function gunseta() {
  echo ''

  if [[ "$1" ]]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git enabled.
        if [[ -d ".git" ]]; then
          # Unset key for current project with error output suppressed (if any).
          local result=$(git config --unset "$1" &> /dev/null)

          # Print project (cyan) and message (white).
          if [[ $? -eq 0 ]]; then
            echo -e "\033[36m${project:2}\033[m: $1 removed."
          else
            echo -e "\033[36m${project:2}\033[m: $1 does not exist!"
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Key must be supplied."
  fi

  echo ''
}

# Label: Git Since
# Description: Answers a summarized list of Git activity since date/time for all projects in current directory.
# Parameters: $1 (required) - The date/time from which to log activity, $2 (optional) - The commit author.
function gince() {
  echo ''

  if [[ "$1" ]]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git enabled.
        if [[ -d ".git" ]]; then
          # Capture git log activity.
          local results=$(git log --oneline --format='%C(yellow)%H%Creset %C(bold blue)%an%Creset %s%C(bold cyan)%d%Creset %Cgreen(%cr)%Creset' --since "$1" --author "$2" --reverse)
          # Print project name and Git activity only if Git activity was detected.
          if [[ -n "$results" ]]; then
            echo -e "\033[36m${project:2}" # Outputs in cyan color.
            echo -e "$results\n"
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Date/time must be supplied."
    echo ''
  fi
}

# Label: Git Standup
# Description: Answers a summarized list of Git activity since yesterday for all projects in current directory.
function gsup() {
  gince "yesterday" $(git config user.name)
}

# Label: Git Day
# Description: Answers a summarized list of Git current day activity for all projects in current directory.
function gday() {
  gince "12am"
}

# Label: Git Week
# Description: Answers a summarized list of Git current week activity for all projects in current directory.
function gweek() {
  gince "last Monday 12am"
}

# Label: Git Month
# Description: Answers a summarized list of Git current month activity for all projects in current directory.
function gmonth() {
  gince "month 1 12am"
}

# Label: Git Tail
# Description: Answers commit history since last tag for current project and copies results to clipboard.
function gtail() {
  _git_commits_since_last_tag | pbcopy && echo -e "`pbpaste`\n(copied to clipboard)"
}

# Label: Git Tail (all)
# Description: Answers commit history count since last tag for all projects in current directory.
function gtaila() {
  echo ''

  # Iterate through root project directories.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [[ -d ".git" ]]; then
        # Count outstanding commits.
        local count=$(_git_commits_since_last_tag | wc -l | xargs -n 1)
        # Print project name and Git activity only if Git activity is detected.
        if [[ -n $count && $count != 0 ]]; then
          # Outputs project (cyan color) with color-coded commit count (based on volume).
          if [[ $count -ge 30 ]]; then
            echo -e "\033[36m${project:2}:\033[m \033[31m$count\033[m" # Red count color.
          elif [[ $count -ge 20 && $count -le 29 ]]; then
            echo -e "\033[36m${project:2}:\033[m \033[1;31m$count\033[m" # Light red count color.
          elif [[ $count -ge 10 && $count -le 19 ]]; then
            echo -e "\033[36m${project:2}:\033[m \033[33m$count\033[m" # Yellow count color.
          else
            echo -e "\033[36m${project:2}:\033[m $count" # White count color.
          fi
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Stash List
# Description: Lists git stashes in an easy to read format.
function gashl() {
  git stash list --pretty=format:'%C(yellow)%gd%C(reset) %s'
}

# Label: Git Stash Show
# Description: Enhances git stash show behavior by prompting for input (multiple) or showing last stash (single).
function gashs() {
  _process_git_stash "show" "Git Stash Show Options (select stash to show)"
}

# Label: Git Stash Pop
# Description: Enhances git stash pop behavior by prompting for input (multiple) or popping last stash (single).
function gashp() {
  _process_git_stash "pop" "Git Stash Pop Options (select stash to pop)"
}

# Label: Git Stash Drop
# Description: Enhances git stash drop behavior by prompting for input (multiple) or dropping last stash (single).
function gashd() {
  _process_git_stash "drop" "Git Stash Drop Options (select stash to drop)"
}

# Label: Git Stash (all)
# Description: Answers stash count for all projects within current directory.
function gasha() {
  echo ''

  # Iterate through root project directories.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [[ -d ".git" ]]; then
        # Count outstanding commits.
        local size=$(git stash list | wc -l | xargs -n 1)
        # Print project name and Git activity only if Git activity is detected.
        if [[ -n $size && $size != 0 ]]; then
          echo -e "\033[36m${project:2}:\033[m $size" # Outputs in cyan color.
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Pull (all)
# Description: Pulls down new changes (if any) from remote branch for all projects in current directory.
function gpua() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [[ -d ".git" ]]; then
        # Capture current project status.
        local results=$(git pull | tail -1)
        # Print project name and Git activity only if Git activity was detected.
        if [[ -n "$results" && "$results" != "Already up-to-date." ]]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "  $results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Add (all)
# Description: Applies file changes (including new files) for all projects within current directory.
function galla() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [[ -d ".git" ]]; then
        # Apply all changes to Git.
        local results=$(git add --verbose --all .)
        # Print project name and Git activity only if Git activity was detected.
        if [[ -n "$results" ]]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "$results\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Commit and Push (all)
# Description: Commits and pushes changes for all projects within current directory.
# Parameters: $1 (required) - The commit message.
function gcap() {
  echo ''

  if [[ "$1" ]]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git-enabled.
        if [[ -d ".git" ]]; then
          # Only process projects that have changes.
          if [[ "$(git status -s)" ]]; then
            echo -e "\n\033[36m${project:2}\033[m" # Outputs in cyan color.
            git commit --all --message "$1" && git push
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Commit message must be supplied."
  fi

  echo ''
}

# Label: Git Validate and Clean (all)
# Description: Validates and cleans all projects in current directory.
function gvca() {
  echo ''

  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [[ -d ".git" ]]; then
        echo -e "\n\033[36m${project:2}\033[m" # Outputs in cyan color.
        git fsck && git gc
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Branch Delete
# Description: Deletes local and remote branch (if found).
# Parameters: $1 (required) - The branch name.
function gbd() {
  echo ''

  if [[ "$1" ]]; then
    read -p "You are about to delete the '$1' branch from local and remote repositories. Continue (y/n)?: " response
    if [[ "$response" == 'y' ]]; then
      echo -n "Local Branch: "
      if [[ -n "$(git branch --list $1)" ]]; then
        git branch -D "$1"
      else
        echo "No local branch found. Skipped."
      fi

      echo -n "Remote Branch: "
      if [[ -n "$(git branch --remotes --list origin/$1)" ]]; then
        git push origin :"$1"
      else
        echo "No remote branch found. Skipped."
      fi
    else
      echo "Branch deletion aborted."
    fi
  else
    echo "ERROR: Branch name must be supplied."
  fi

  echo ''
}

# Label: Git Branch Delete Merged
# Description: Deletes local and remote merged branches (if found).
function gbdm() {
  local branches=$(git branch --merged | grep -v "\*" | xargs -n 1)
  for branch in $branches; do
    gbd $branch
  done
}

# Label: Git Tag Delete
# Description: Deletes local and remote tag (if found).
# Parameters: $1 (required) - The tag name.
function gtagd() {
  echo ''

  if [[ "$1" ]]; then
    read -p "You are about to delete the '$1' tag from local and remote repositories. Continue (y/n)?: " response
    if [[ "$response" == 'y' ]]; then
      echo -n "Local Tag: "
      if [[ -n "$(git tag --list $1)" ]]; then
        git tag --delete "$1"
      else
        echo "No local tag found. Skipped."
      fi

      echo -n "Remote Tag: "
      if [[ -n "$(git ls-remote --tags origin | grep $1)" ]]; then
        git push --delete origin "$1"
      else
        echo "No remote tag found. Skipped."
      fi
    else
      echo "Tag deletion aborted."
    fi
  else
    echo "ERROR: Tag name must be supplied."
  fi

  echo ''
}

#---------------------------------------#
# Section: [GitHub](https://github.com) #
#---------------------------------------#

# Label: GitHub Initizalize
# Description: Initializes a new GitHub repo with sensible defaults (https://gist.github.com/1105392).
# Parameters: $1 (required) - The GitHub user account name, $2 (required) - The repository name.
function githubi() {
  git remote add origin git@github.com:$1/$2.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# Label: GitHub
# Description: View current GitHub project commits, branches, tags, etc. in default browser.
# Parameters: $1 (optional) - The option selection, $2 (optional) - The option input.
function gh() {
  if [ -d ".git" ]; then
    while true; do
      if [ -z "$1" ]; then
        echo "Usage: gh OPTION"
        echo -e "\nGitHub Options:"
        echo "  o: Open GitHub project in default browser."
        echo "  c: Open GitHub project commit(s) in default browser."
        echo "  b: Open GitHub project branches in default browser."
        echo "  t: Open GitHub project tags (releases) in default browser."
        echo "  p: Open GitHub project pull requests in default browser."
        echo "  u: Print GitHub project URL."
        echo "  q: Quit/Exit."
        echo ''
        read -p "Enter selection: " response
        echo ''
        _process_gh_option $response "$2"
      else
        _process_gh_option "$1" "$2"
      fi
    done
  else
    echo "ERROR: Not a Git repository!"
  fi

  echo ''
}

#-------------------------------------------#
# Section: [Bundler](http://gembundler.com) #
#-------------------------------------------#

# Label: Bundle Outdated (all)
# Description: Answers a list of outdated gems for all projects within current directory.
function boa() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -f "Gemfile.lock" ]; then
        # Capture current project status.
        local results=$(bundle outdated | grep '*')
        # Print project name and status only if Bundler activity was detected.
        if [ -n "$results" ]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "$results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Bundle Update (all)
# Description: Updates gems for all projects within current directory.
function bua() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that support Bundler.
      if [ -f "Gemfile.lock" ]; then
        rm -f Gemfile.lock
        local results=$(bundle install)
        # Print project name and status only if Bundler activity was detected.
        if [ -n "$results" ]; then
          echo -e "\033[36m${project:2}\033[m: ✓" # Outputs in cyan color.
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Bundle Clean (all)
# Description: Cleans all projects of gem artifacts (i.e. pkg folder).
function bca() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that support Bundler.
      if [ -f "Gemfile.lock" ]; then
        # Print project name and status.
        if [ -d "pkg" ]; then
          rm -rf pkg
          echo -e "\033[36m${project:2}\033[m: ✓" # Outputs in cyan color.
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Bundle Execute Rake
# Description: Executes Rake via binstub or Bundler.
function ber() {
  if [ -e bin/rake ]; then
    bin/rake $@
  else
    bundle exec rake $@
  fi
}

# Label: Bundle Execute Rake Test
# Description: Executes a single Test::Unit test via binstub or Bundler.
function bertt() {
  if [ "$1" ]; then
    ber test TEST="$1"
  else
    echo "ERROR: Missing test file path. Usage: bertt test/unit/example_test.rb."
  fi
}

# Label: Bundle Execute RSpec
# Description: Executes RSpec via binstub or Bundler.
function bes() {
  if [ -e bin/rspec ]; then
    bin/rspec $@
  else
    bundle exec rspec $@
  fi
}

# Label: Bundle Execute Capistrano
# Description: Executes Capistrano via binstub or Bundler.
function bec() {
  if [ -e bin/cap ]; then
    bin/cap $@
  else
    bundle exec cap $@
  fi
}

#-------------------------------------------#
# Section: [Ruby](http://www.ruby-lang.org) #
#-------------------------------------------#

# Label: Ruby Upgrade (all)
# Description: Upgrades all Ruby projects in current directory with new Ruby version information.
# Parameters: $1 (required) - The new version to upgrade to. Example: 2.0.0-p0.
function rua() {
  if [ "$1" ]; then
    while read project; do
      (
        cd "$project"
        # Only process projects which have ruby version information.
        if [ -e ".ruby-version" ]; then
          local old_version=$(head -n 1 .ruby-version)
          local new_version="$1"

          # Update only if old is not equal to new version.
          if [ "$old_version" != "$new_version" ]; then
            echo "$1" > .ruby-version
            # Outputs project in cyan and upgrade info in white colors.
            echo -en "\n\033[36m${project:2}\033[m: $old_version --> $new_version."
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Version must be supplied."
  fi

  echo -e '\n'
}

#--------------------------------------------------#
# Section: [Ruby on Rails](http://rubyonrails.org) #
#--------------------------------------------------#

# Label: Rails New
# Description: Builds a new rails application skeleton for selected template.
# Parameters: $1 (required) - The Rails application name, $2 (optional) - The template to apply.
function rew() {
  echo

  if [ "$1" ]; then
    while true; do
      if [ $2 ]; then
        _process_rew_option $1 $2
      else
        echo "Usage: rew NAME TEMPLATE"
        echo -e "\nAvailable Ruby on Rails Templates:"
        echo "  Rails:"
        echo "    1: Rails Default Template"
        echo "    2: Rails Slim Template"
        echo "    3: Rails Slim Template (experimental)"
        echo "    4: Rails Setup Template"
        echo "    5: Rails Setup Template (experimental)"
        echo "  Engines:"
        echo "    6: Rails Engine Default Template"
        echo
        read -p "Please pick one (or type 'q' to quit): " response
        echo
        _process_rew_option "$1" $response
      fi
    done
  else
    echo "ERROR: Rails application name must be supplied."
  fi

  echo
}

# Label: Rails Script Console
# Description: Launches the Rails console.
function sc() {
  _run_rails_command "console" "$*"
}

# Label: Rails Script Server
# Description: Launches the Rails server.
function ss() {
  _run_rails_command "server" "$*"
}

# Label: Rails Script Generator
# Description: Launches a Rails generator for controller, model, etc. scaffolds.
function sg() {
  _run_rails_command "generate" "$*"
}

# Label: Rails Script Database Console
# Description: Launches the Rails database console for direct access to the current application database.
function sdb() {
  _run_rails_command "dbconsole" "$*"
}

#----------------------------------------------#
# Section: [Travis CI](https://travis-ci.org/) #
#----------------------------------------------#

# Label: Travis CI Encrypt (all)
# Description: Encrypts a string for all Travis CI-enabled (.travis.yml) projects in current directory.
# Parameters: $1 (required) - The key to add, $2 (require) - The value to encrypt.
function tcie() {
  echo

  if [ -z "$1" ]; then
    echo -e "ERROR: Encryption key must be supplied. Example: notifications.slack.\n"
    return 0
  fi

  if [ -z "$2" ]; then
    echo -e "ERROR: Encryption value must be supplied. Example: ra:B35GH59594BKDK.\n"
    return 0
  fi

  while read project; do
    (
      cd "$project"
      # Only process projects which have ruby version information.
      if [ -e ".travis.yml" ]; then
        travis encrypt "$2" --add "$1"
        echo -e "\033[36m${project:2}\033[m: ✓" # Outputs in cyan color.
      fi
    )
  done < <(find . -type d -depth 1)

  echo -e "\n"
}

#---------------------------------------------------------------------------#
# Section: [Site Validator](https://github.com/jaimeiniesta/site_validator) #
#---------------------------------------------------------------------------#

# Label: Site Validator
# Description: Generates a validation report for a site using the W3C Validator.
# Parameters: $1 (required) - The site URL, $2 (optional) - The report file path/name.
function sv() {
  echo ''

  if [ $(command -v site_validator) ]; then
    if [ "$1" ]; then
      if [ "$2" ]; then
        local report="$2"
      else
        local report="report.html"
      fi

      site_validator "$1" "$report" && open "$report"
    else
      echo "ERROR: Missing web site URL. Usage: sv http://www.example.com output.html."
    fi
  else
    echo "ERROR: Site Validator not found. To install, run: gem install site_validator."
  fi

  echo ''
}

#-----------------------------------------------------#
# Section: [Image Magick](http://www.imagemagick.org) #
#-----------------------------------------------------#

# Label: Sketch
# Description: Converts a photo into a sketch. Inspired by [Whiteboard Cleaner Gist](https://gist.github.com/lelandbatey/8677901).
# Parameters: $1 (required) - The input image path, $2 (optional) - The output image path. Default: sketch.jpg.
function sketch() {
  local input_path="$1"
  local output_path="$2"

  if [ -z "$input_path" ]; then
    echo -e "ERROR: Input image path must be supplied."
    return 0
  fi

  if [ -z "$output_path" ]; then
    local output_path="sketch.jpg"
  fi

  echo ''
  echo "Processing image: $input_path..."
  convert "$input_path" -morphology Convolve DoG:15,100,0 -negate -normalize -blur 0x1 -channel RBG -level 60%,91%,0.1 "$output_path"
  echo "Sketch image ready: $output_path."
  echo ''
}

#------------------------------------------#
# Section: [FFmpeg](http://www.ffmpeg.org) #
#------------------------------------------#

# Label: Gifize
# Description: Converts a video into an animated GIF.
# Parameters: $1 (required) - The source video input path, $2 (required) - The animated gif output path.
function gifize() {
  local input_path="$1"
  local output_path="$2"
  local temp_path=/tmp/gifize.gif

  echo ''
  if [[ -n "$input_path" && -n "$output_path" ]]; then
    ffmpeg -i "$input_path" -pix_fmt rgb24 $temp_path
    convert -layers Optimize $temp_path "$output_path"
    rm -f $temp_path
    echo -e "\nGIF Complete: $output_path"
  else
    echo "Usage: gifize input output"
  fi
  echo ''
}

#-----------------------------------------#
# Section: [Twitter](https://twitter.com) #
#-----------------------------------------#

# Label: Twitter Followers
# Description: Captures or compares Twitter followers (since last check).
function tfollowers() {
  local old_followers_file_path="$HOME/followers.txt"
  local new_followers_file_path="$HOME/followers-new.txt"

  echo ''

  if [ ! $(command -v t) ]; then
    echo -e "ERROR: t (http://sferik.github.io/t) is not installed.\n"
    return 0
  fi

  if [ ! $(command -v ksdiff) ]; then
    echo -e "ERROR: ksdiff (http://www.kaleidoscopeapp.com/ksdiff2) is not installed.\n"
    return 0
  fi

  if [[ -e "$old_followers_file_path" ]]; then
    echo "Comparing Twitter followers ($old_followers_file_path == $new_followers_file_path)..."
    t followers > "$new_followers_file_path"
    ksdiff --wait "$old_followers_file_path" "$new_followers_file_path"
    rm -f "$old_followers_file_path"
    mv "$new_followers_file_path" "$old_followers_file_path"
  else
    echo "Capturing Twitter followers ($old_followers_file_path)..."
    t followers > "$old_followers_file_path"
    ksdiff --wait "$old_followers_file_path"
  fi
  echo ''
}

#-------------------#
# Section: Dotfiles #
#-------------------#

# Label: Dotfiles
# Description: Informational utility for learning more about dotfile aliases, functions, etc.
# Parameters: $1 (optional) - The option selection, $2 (optional) - The option input.
function dots() {
  while true; do
    if [[ $# == 0 ]]; then
      echo "Usage: dots OPTION"
      echo -e "\nDotfile Options:"
      echo "  a: Print aliases."
      echo "  f: Print functions."
      echo "  s: Search for alias/function."
      echo "  q: Quit/Exit."
      echo ''
      read -p "Enter selection: " response
      echo ''
      _process_dots_option $response "$2"
    else
      _process_dots_option $1 "$2"
    fi
  done

  echo ''
}
