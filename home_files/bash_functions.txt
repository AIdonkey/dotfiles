# BASH FUNCTIONS

#--------------------------------------#
# Section: [curl](http://curl.haxx.se) #
#--------------------------------------#

# Label: Curl Inspect
# Description: Inspect remote file, via curl, within default editor.
function curli() {
  file=$(mktemp -t suspicious_curl_file) || { echo "Failed to create temporary curl file"; return; }
  curl --fail --silent --show-error --location "$1" > $file || { echo "Failed to curl file"; return; }
  $EDITOR -w $file || { echo "Unable to open temporary curl file"; return; }
  rm -f $file;
}

#------------------------------------#
# Section: [Git](http://git-scm.com) #
#------------------------------------#

# Label: Git Root
# Description: Changes to project root directory (regardless of how deep the current path might be).
function groot() {
  cd "$(dirname $(git rev-parse --git-dir))"
}

# Label: Git Status (all)
# Description: Answers the status of projects with uncommited/unpushed changes.
function gsta() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        # Capture current project status.
        results=$(git status --short --branch)
        # Print project name and Git activity only if Git activity is detected.
        if [ "$results" != "## master" ]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "$results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Get Config Value (all)
# Description: Answers key value for all projects in current directory.
# Parameters: $1 = The key name.
function ggeta() {
  echo ''

  if [ "$1" ]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git enabled.
        if [ -d ".git" ]; then
          # Get Git config value for given key.
          result=$(git config "$1")

          # Print project (cyan) and message (white).
          echo -e "\033[36m${project:2}\033[m: $result"
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Key must be supplied."
  fi

  echo ''
}

# Label: Git Email
# Description: Answers user email for current project.
function gail() {
  if [ -d ".git" ]; then
    git config user.email
  fi
}

# Label: Git Email (all)
# Description: Answers user email for all projects in current directory.
function gaila() {
  ggeta "user.email"
}

# Label: Git Set Config Value (all)
# Description: Sets key value for all projects in current directory.
# Parameters: $1 = The key name, $2 = The key value.
function gseta() {
  echo ''

  if [ "$1" -a "$2" ]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git enabled.
        if [ -d ".git" ]; then
          # Set key value for current project.
          git config "$1" "$2"
          # Print project (cyan) and email (white).
          echo -e "\033[36m${project:2}\033[m: $1 = $2"
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Key and value must be supplied."
  fi

  echo ''
}

# Label: Git Email Set (all)
# Description: Sets user email for all projects in current directory.
# Parameters: $1 = The email address.
function gailsa() {
  gseta "user.email" "$1"
}

# Label: Git Unset (all)
# Description: Unsets key value for all projects in current directory.
# Parameters: $1 = The key name.
function gunseta() {
  echo ''

  if [ "$1" ]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git enabled.
        if [ -d ".git" ]; then
          # Unset key for current project with error output suppressed (if any).
          result=$(git config --unset "$1" &> /dev/null)

          # Print project (cyan) and message (white).
          if [ $? -eq 0 ]; then
            echo -e "\033[36m${project:2}\033[m: $1 removed."
          else
            echo -e "\033[36m${project:2}\033[m: $1 does not exist!"
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Key must be supplied."
  fi

  echo ''
}

# Label: Git Since
# Description: Answers a summarized list of Git activity since date/time for all projects in current directory.
# Parameters: $1 = The past date/time from which to log activity up to now.
function gince() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        user=$(git config user.name)
        # Capture git log activity.
        results=$(git log --oneline --format='%C(yellow)%H%Creset %s' --author "$user" --since "$1" --reverse)
        # Print project name and Git activity only if Git activity was detected.
        if [ -n "$results" ]; then
          echo -e "\033[36m${project:2}" # Outputs in cyan color.
          echo -e "$results\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Label: Git Standup
# Description: Answers a summarized list of Git activity since yesterday for all projects in current directory.
function gsup() {
  gince "yesterday"
}

# Label: Git Day
# Description: Answers a summarized list of Git current day activity for all projects in current directory.
function gday() {
  gince "12am"
}

# Label: Git Week
# Description: Answers a summarized list of Git current week activity for all projects in current directory.
function gweek() {
  gince "last Monday 12am"
}

# Label: Git Month
# Description: Answers a summarized list of Git current month activity for all projects in current directory.
function gmonth() {
  gince "month 1 12am"
}

# Label: Git Tail
# Description: Answers commit history since last tag for current project.
function gtail() {
  if [ "$(git tag)" ]; then
    git log --oneline --format='%C(yellow)%H%Creset %s' --reverse $(git describe --abbrev=0 --tags)..HEAD
  fi
}

# Label: Git Tail (all)
# Description: Answers commit history count since last tag (see gtail) for all projects in current directory.
function gtaila() {
  echo ''

  # Iterate through root project directories.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [ -d ".git" ]; then
        # Count outstanding commits.
        count=$(gtail | wc -l | xargs -n 1)
        # Print project name and Git activity only if Git activity is detected.
        if [ -n $count ] && [ $count != 0 ]; then
          # Outputs project (cyan color) with color-coded commit count (based on volume).
          if [ $count -ge 20 ]; then
            echo -e "\033[36m${project:2}:\033[m \033[31m$count\033[m" # Red count color.
          elif [ $count -ge 10 -a $count -le 19 ]; then
            echo -e "\033[36m${project:2}:\033[m \033[33m$count\033[m" # Yellow count color.
          else
            echo -e "\033[36m${project:2}:\033[m $count" # White count color.
          fi
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Stash (all)
# Description: Answers stash count for all projects within current directory.
function gasha() {
  echo ''

  # Iterate through root project directories.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [ -d ".git" ]; then
        # Count outstanding commits.
        size=$(git stash list | wc -l | xargs -n 1)
        # Print project name and Git activity only if Git activity is detected.
        if [ -n $size ] && [ $size != 0 ]; then
          echo -e "\033[36m${project:2}:\033[m $size" # Outputs in cyan color.
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Pull (all)
# Description: Pulls down new changes (if any) from remote branch for all projects in current directory.
function gpua() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        # Capture current project status.
        results=$(git pull | tail -1)
        # Print project name and Git activity only if Git activity was detected.
        if [ -n "$results" -a "$results" != "Already up-to-date." ]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "  $results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Commit and Push (all)
# Description: Commits and pushes changes for all projects within current directory.
# Parameters: $1 = The commit message.
function gcap() {
  echo ''

  if [ "$1" ]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git-enabled.
        if [ -d ".git" ]; then
          # Only process projects that have changes.
          if [ "$(git status -s)" ]; then
            git commit --all --message "$1" && git push
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Commit message must be supplied."
  fi

  echo ''
}

# Label: Git Validate and Clean (all)
# Description: Validates and cleans all projects in current directory.
function gvca() {
  echo ''

  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [ -d ".git" ]; then
        echo -e "\n\033[36m${project:2}\033[m" # Outputs in cyan color.
        git fsck && git gc
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Label: Git Branch Delete
# Description: Deletes local and associated remote branch (if found).
function gbd() {
  echo ''

  if [ "$1" ]; then
    read -p "You are about to delete the '$1' branch from local and remote repositories. Continue (y/n)?: " response
    if [ "$response" == 'y' ]; then
      # Handle local branch.
      if [ -n "$(git branch --list $1)" ]; then
        git branch -D "$1"
      else
        echo "No local branch found. Skipped."
      fi

      # Handle remote branch.
      if [ -n "$(git branch --remotes --list origin/$1)" ]; then
        git push origin :"$1"
      else
        echo "No remote branch found. Skipped."
      fi
    else
      echo "Branch deletion aborted."
    fi
  else
    echo "ERROR: Branch name must be supplied."
  fi

  echo ''
}

# Label: Git Branch Delete Merged
# Description: Deletes local and remote merged branches (if found).
function gbdm() {
  branches=$(git branch --merged | grep -v "\*" | xargs -n 1)
  for branch in $branches; do
    gbd $branch
  done
}

#---------------------------------------#
# Section: [GitHub](https://github.com) #
#---------------------------------------#

# Label: GitHub Initizalize
# Description: Initializes a new GitHub repo with sensible defaults (https://gist.github.com/1105392).
# Parameters: user (required) - The GitHub user account name, repo (required) = The repository name.
function githubi() {
  git remote add origin git@github.com:$1/$2.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

#-------------------------------------------#
# Section: [Bundler](http://gembundler.com) #
#-------------------------------------------#

# Label: Bundle Outdated (all)
# Description: Answers a list of outdated gems for all projects within current directory.
function boa() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        # Capture current project status.
        results=$(bundle outdated | grep '*')
        # Print project name and Git activity only if Git activity was detected.
        if [ -n "$results" ]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "$results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

#-------------------------------------------#
# Section: [Ruby](http://www.ruby-lang.org) #
#-------------------------------------------#

# Label: Ruby Upgrade (all)
# Description: Upgrades all Ruby projects in current directory with new Ruby version information.
# Parameters: version = Required. The new version to upgrade to. Example: 2.0.0-p0.
function rua() {
  if [ "$1" ]; then
    while read project; do
      (
        cd "$project"
        # Only process projects which have ruby version information.
        if [ -e ".ruby-version" ]; then
          old_version=$(head -n 1 .ruby-version)
          new_version="$1"

          # Update only if old is not equal to new version.
          if [ "$old_version" != "$new_version" ]; then
            echo "$1" > .ruby-version
            # Outputs project in cyan and upgrade info in white colors.
            echo -en "\n\033[36m${project:2}\033[m: $old_version --> $new_version."
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Version must be supplied."
  fi

  echo -e '\n'
}

#--------------------------------------------------#
# Section: [Ruby on Rails](http://rubyonrails.org) #
#--------------------------------------------------#

# Label: Create Rails Skeleton
# Description: Creates a new rails applications skeleton.
# Parameters: name (required) = The Rails application name, options (optional) = The custom build options to apply.
function _create_rails_skeleton() {
  echo "rails new $1 $2"
  rails new $1 $2
}

# Label: Process Rew Option
# Description: Processes supplied option for constructing new Rails application skeletons with custom build settings.
# Parameters: name (required) = The Rails application name, template (required) = The template to apply.
function _process_rew_option() {
  flags="--database sqlite3 --skip-javascript --skip-test-unit --force --skip-bundle --skip-keeps --template"
  slim_options="$flags https://raw.github.com/bkuhlmann/rails_slim_template/master/template.rb"
  setup_remote_options="$flags https://raw.github.com/bkuhlmann/rails_setup_template/master/template.rb"
  setup_local_options="$flags $HOME/Dropbox/Development/Projects/rails_setup_template/template.rb"

  case $2 in
    1)
      _create_rails_skeleton "$1"
      break;;
    2)
      _create_rails_skeleton "$1" "$slim_options"
      break;;
    3)
      _create_rails_skeleton "$1" "$setup_remote_options"
      break;;
    4)
      _create_rails_skeleton "$1" "$setup_local_options"
      break;;
    'q')
      break;;
    *)
      echo "ERROR: Invalid option."
      break;;
  esac
}

# Label: Rails New
# Description: Builds a new rails application skeleton for selected template.
# Parameters: name (required) = The Rails application name, template (optional) = The template to apply.
function rew() {
  echo

  if [ "$1" ]; then
    while true; do
      if [ $2 ]; then
        _process_rew_option $1 $2
      else
        echo "Usage: rew NAME TEMPLATE"
        echo -e "\nAvailable Templates:"
        echo "  1: Rails Default Template"
        echo "  2: Rails Slim Template"
        echo "  3: Rails Setup Template"
        echo "  4: Rails Setup Template (experimental)"
        echo
        read -p "Please pick one (or type 'q' to quit): " response
        echo
        _process_rew_option "$1" $response
      fi
    done
  else
    echo "ERROR: Rails application name must be supplied."
  fi

  echo
}

# Label: Rails Script Console
# Description: Launches the Rails console.
function sc() {
  if [ -e script/rails ]; then
    script/rails console $@
  elif [ -e script/console ]; then
    script/console $@
  else
    rails console $@
  fi
}

# Label: Rails Script Server
# Description: Launches the Rails server.
function ss() {
  if [ -e script/rails ]; then
    script/rails server $@
  elif [ -e script/server ]; then
    script/server $@
  else
    rails server $@
  fi
}

# Label: Rails Script Generator
# Description: Launches a Rails generator for controller, model, etc. scaffolds.
function sg() {
  if [ -e script/rails ]; then
    script/rails generate $@
  elif [ -e script/generate ]; then
    script/generate $@
  else
    rails generate $@
  fi
}

# Label: Rails Script Database Console
# Description: Launches the Rails database console for direct access to the current application database.
function sdb() {
  if [ -e script/rails ]; then
    script/rails dbconsole $@
  elif [ -e script/dbconsole ]; then
    script/dbconsole $@
  else
    rails dbconsole $@
  fi
}

# Label: Bundle Execute Rake Test
# Description: Executes a single Test::Unit test.
function bertt() {
  if [ "$1" ]; then
    bundle exec rake test TEST="$1"
  else
    echo "ERROR: Missing test file path. Usage: bertt test/unit/example_test.rb."
  fi
}

#------------------------------------------#
# Section: [FFmpeg](http://www.ffmpeg.org) #
#------------------------------------------#

# Label: Gifize
# Description: Converts a video into an animated GIF.
# Parameters: input = Required. The file path of the source video, output = Required. The file path of the animated gif (to be created).
function gifize() {
  input_path="$1"
  output_path="$2"
  temp_path=/tmp/gifize.gif

  echo ''
  if [[ -n "$input_path" && -n "$output_path" ]]; then
    ffmpeg -i "$input_path" -pix_fmt rgb24 $temp_path
    convert -layers Optimize $temp_path "$output_path"
    rm -f $temp_path
    echo -e "\nGIF Complete: $output_path"
  else
    echo "Usage: gifize input output"
  fi
  echo ''
}

#-------------------#
# Section: Dotfiles #
#-------------------#

function _print_section() {
  if [[ "$1" == "# Section:"* ]]; then
    section=$(echo $1 | sed 's/# Section://' | sed 's/^ *//g' | tr -d '#')
    echo -e "\n##### $section"
  fi
}

function _print_alias() {
  echo "$1" | sed 's/alias //' | sed 's/="/ = "/' | sed "s/='/ = '/"
}

function _print_aliases() {
  while read line; do
    _print_section "$line"

    if [[ "$line" == "alias"* ]]; then
      echo -n "    "
      _print_alias "$line"
    fi
  done < "$HOME/.bash_aliases"
}

function _print_function_name() {
  name=$(echo $1 | sed 's/function //' | sed 's/() {//')
  echo "$name = $2 - $3"
}

function _set_function_label() {
  if [[ "$1" == "# Label:"* ]]; then
    label=$(echo "$1" | sed 's/# Label://' | sed 's/^ *//g')
  fi
}

function _set_function_description() {
  if [[ "$line" == "# Description:"* ]]; then
    description=$(echo $line | sed 's/# Description://' | sed 's/^ *//g')
  fi
}

function _print_functions() {
  while read line; do
    _print_section "$line"
    _set_function_label "$line"
    _set_function_description "$line"

    if [[ "$line" == "function"*"() {" && "$line" != "function _"* ]]; then
      echo -n "    "
      _print_function_name "$line" "$label" "$description"
      unset label
      unset description
    fi
  done < "$HOME/.bash_functions"
}

function _find_alias() {
  while read line; do
    if [[ "$line" == "alias "*"$1"* ]]; then
      echo -n "    Alias: "
      _print_alias "$line"
    fi
  done < "$HOME/.bash_aliases"
}

function _find_function() {
  while read line; do
    _set_function_label "$line"
    _set_function_description "$line"

    if [[ "$line" == "function "*"$1"* ]]; then
      echo -n "    Function: "
      _print_function_name "$line" "$label" "$description"
      unset label
      unset description
    fi
  done < "$HOME/.bash_functions"
}

function _find_command() {
  echo

  if [ "$1" ]; then
    echo "\"$1\" Search Results:"

    _find_alias "$1"
    _find_function "$1"
  else
    echo "ERROR: Nothing to search for. Command must be supplied."
  fi
}

function _process_option() {
  case $1 in
    'a')
      _print_aliases
      break;;
    'f')
      _print_functions
      break;;
    's')
      _find_command "$2"
      break;;
    'q')
      break;;
    *)
      echo "ERROR: Invalid option."
      break;;
  esac
}

# Label: Dots
# Description: Informational utility for learning more about dotfile aliases, functions, etc.
function dots() {
  while true; do
    if [ -z "$1" ]; then
      echo "Usage: dots OPTION"
      echo -e "\nDotfile Options:"
      echo "  a: Print aliases."
      echo "  f: Print functions."
      echo "  s: Search for alias/function."
      echo "  q: Quit/Exit."
      echo ''
      read -p "Enter selection: " response
      echo ''
      _process_option $response "$2"
    else
      _process_option $1 "$2"
    fi
  done

  echo ''
}
