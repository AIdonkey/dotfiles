# BASH FUNCTIONS

#--------------------------#
# Git (http://git-scm.com) #
#--------------------------#

# Git Root - Changes to project root directory (regardless of how deep the current path might currently be).
function groot() {
  cd "$(dirname $(git rev-parse --git-dir))"
}

# Git Status (all) - Answers the status of projects with uncommited/unpushed changes.
function gsta() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        # Capture current project status.
        results=$(git status --short --branch)
        # Print project name and Git activity only if Git activity is detected.
        if [ "$results" != "## master" ]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "$results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Git Since - Answers a summarized list of Git activity since a specifiy date/time for all projects
# in current directory, broken down by project.
# Parameters:
# $1 = The past date/time from which to log activity up to now.
function gince() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        user=$(git config user.name)
        # Capture git log activity.
        results=$(git log --oneline --format='%C(yellow)%H%Creset %s' --author "$user" --since "$1" --reverse)
        # Print project name and Git activity only if Git activity was detected.
        if [ -n "$results" ]; then
          echo -e "\033[36m${project:2}" # Outputs in cyan color.
          echo -e "$results\n"
        fi
      fi
    )
  done < <(find . -type d -depth 1)
}

# Git Standup - Answers a summarized list of Git activity since yesterday for all projects in current directory,
# broken down by project. This is a great way to see what you did yesterday for today's standup report.
function gsup() {
  gince "yesterday"
}

# Git Today - Answers a summarized list of Git activity (today only) for all projects in current
# directory, broken down by project.
function gday() {
  gince "12am"
}

# Git Tail - Answers the commit history from the last tag (i.e. tail end of unversioned/untagged commits).
function gtail() {
  if [ "$(git tag)" ]; then
    git log --oneline --format='%C(yellow)%H%Creset %s' --reverse $(git describe --abbrev=0 --tags)..HEAD
  fi
}

# Git Tail (all) - Answers tail count (see gtail function for details) for all projects within current directory.
function gtaila() {
  echo ''

  # Iterate through root project directories.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [ -d ".git" ]; then
        # Count outstanding commits.
        count=$(gtail | wc -l | xargs -n 1)
        # Print project name and Git activity only if Git activity is detected.
        if [ -n $count ] && [ $count != 0 ]; then
          # Outputs project (cyan color) with color-coded commit count (based on volume).
          if [ $count -ge 20 ]; then
            echo -e "\033[36m${project:2}:\033[m \033[31m$count\033[m" # Red count color.
          elif [ $count -ge 10 -a $count -le 19 ]; then
            echo -e "\033[36m${project:2}:\033[m \033[33m$count\033[m" # Yellow count color.
          else
            echo -e "\033[36m${project:2}:\033[m $count" # White count color.
          fi
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Git Stash (all) - Answers stash size for all projects within current directory.
function gasha() {
  echo ''

  # Iterate through root project directories.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git-enabled.
      if [ -d ".git" ]; then
        # Count outstanding commits.
        size=$(git stash list | wc -l | xargs -n 1)
        # Print project name and Git activity only if Git activity is detected.
        if [ -n $size ] && [ $size != 0 ]; then
          echo -e "\033[36m${project:2}:\033[m $size" # Outputs in cyan color.
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Git Pull (all) - Pulls down new changes (if any) from remote branch for all projects in current directory.
function gpua() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        # Capture current project status.
        results=$(git pull | tail -1)
        # Print project name and Git activity only if Git activity was detected.
        if [ -n "$results" -a "$results" != "Already up-to-date." ]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "  $results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

# Git Commit and Push (all) - Commits and pushes changes for all projects within current directory. Useful
# when making the same change across multiple projects.
# Parameters:
# $1 = The commit message.
function gcap() {
  echo ''

  if [ "$1" ]; then
    # Iterate project directories located in root directory.
    while read project; do
      (
        cd "$project"
        # Only process projects that are Git-enabled.
        if [ -d ".git" ]; then
          # Only process projects that have changes.
          if [ "$(git status -s)" ]; then
            git commit -a -m "$1" && git push
          fi
        fi
      )
    done < <(find . -type d -depth 1)
  else
    echo "ERROR: Commit message must be supplied."
  fi

  echo ''
}

# Git Branch Delete - Deletes local and associated remote branch (if found).
function gbd() {
  echo ''

  if [ "$1" ]; then
    read -p "You are about to delete the '$1' branch from local and remote repositories. Continue (y/n)?: " response
    if [ "$response" == 'y' ]; then
      # Handle local branch.
      if [ -n "$(git branch --list $1)" ]; then
        git branch -D "$1"
      else
        echo "No local branch found. Skipped."
      fi

      # Handle remote branch.
      if [ -n "$(git branch --remotes --list origin/$1)" ]; then
        git push origin :"$1"
      else
        echo "No remote branch found. Skipped."
      fi
    else
      echo "Branch deletion aborted."
    fi
  else
    echo "ERROR: Branch name must be supplied."
  fi

  echo ''
}

# Git Branch Delete Merged - Deletes all local and associated remote branch (if found) merged branches.
function gbdm() {
  branches=$(git branch --merged | grep -v "\*" | xargs -n 1)
  for branch in $branches; do
    gbd $branch
  done
}

#-----------------------------#
# GitHub (https://github.com) #
#-----------------------------#

# Initizalize GitHub - Initializes a new GitHub repo with sensible defaults.
# Reference: https://gist.github.com/1105392
# ==== Parameters
# * +user+ - Required. The GitHub user account name.
# * +repo+ - Required. The repo name.
function init_github() {
  git remote add origin git@github.com:$1/$2.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

#---------------------------------#
# Bundler (http://gembundler.com) #
#---------------------------------#

# Bundle Outdated (all) - Answers a list of outdated gems for all projects within current directory.
function boa() {
  echo ''

  # Iterate project directories located in root directory.
  while read project; do
    (
      cd "$project"
      # Only process projects that are Git enabled.
      if [ -d ".git" ]; then
        # Capture current project status.
        results=$(bundle outdated | grep '*')
        # Print project name and Git activity only if Git activity was detected.
        if [ -n "$results" ]; then
          echo -e "\033[36m${project:2}\033[m" # Outputs in cyan color.
          echo -e "$results"
        fi
      fi
    )
  done < <(find . -type d -depth 1)

  echo ''
}

#----------------------------------------#
# Ruby on Rails (http://rubyonrails.org) #
#----------------------------------------#

# Rails New - Builds a new rails app for given template selection.
# ==== Parameters
# * +name+ - Required. The name of the app to create.
# * +selection+ - Optional. The template to apply. Default: (prompts for choice).
function rew {
  # Set defaults.
  options=''

  # Template options.
  rails_setup_template_options="-d sqlite3 -J -T -f --skip-bundle -m https://raw.github.com/bkuhlmann/rails_setup_template/master/template.rb"
  rails_setup_template_local_options="-d sqlite3 -J -T -f --skip-bundle -m ~/Dropbox/Development/Ruby/rails_setup_template/template.rb"

  # Bypass prompt if selection is supplied.
  if [ $2 ]; then
    case $2 in
      2)
        options=$rails_setup_template_options
        ;;
      3)
        options=$rails_setup_template_local_options
        ;;
    esac
  # Otherwise, prompt for template when selection is unknown.
  else
    echo -e "Usage: rew NAME TEMPLATE"
    echo -e "\nAvailable Templates:"
    echo "  1: Rails Default Template"
    echo "  2: Rails Setup Template"
    echo "  3: Rails Setup Template (local)"
    while true; do
      read -p "Please pick one (or type 'q' to quit): " response
      case $response in
        '1')
          unset options
          break;;
        '2')
          options=$rails_setup_template_options
          break;;
        '3')
          options="-d sqlite3 -J -T -f --skip-bundle -m ~/Dropbox/Development/Ruby/rails_setup_template/template.rb"
          break;;
        'q')
          return;;
      esac
    done
  fi

  # Create new Rails app.
  echo "rails new $1 $options"
  rails new $1 $options
  echo
}

# Rails Script Console
function sc {
  if [ -e script/rails ]; then
    script/rails console $@
  else
    script/console $@
  fi
}

# Rails Script Server
function ss {
  if [ -e script/rails ]; then
    script/rails server $@
  else
    script/server $@
  fi
}

# Rails Script Generator
function sg {
  if [ -e script/rails ]; then
    script/rails generate $@
  else
    script/generate $@
  fi
}

# Rails Script Database Console
function sdb {
  if [ -e script/rails ]; then
    script/rails dbconsole $@
  else
    script/dbconsole $@
  fi
}

#--------------------------------#
# FFmpeg (http://www.ffmpeg.org) #
#--------------------------------#

# Gifize - Converts a video into an animated GIF.
# ==== Parameters
# * +input+ - Required. The file path of the source video.
# * +output+ - Required. The file path of the animated gif (to be created).
function gifize {
  input_path="$1"
  output_path="$2"
  temp_path=/tmp/gifize.gif

  echo ''
  if [[ -n "$input_path" && -n "$output_path" ]]; then
    ffmpeg -i "$input_path" -pix_fmt rgb24 $temp_path
    convert -layers Optimize $temp_path "$output_path"
    rm -f $temp_path
    echo -e "\nGIF Complete: $output_path"
  else
    echo "Usage: gifize input output"
  fi
  echo ''
}
