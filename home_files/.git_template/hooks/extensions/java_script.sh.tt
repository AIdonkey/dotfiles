#!/bin/bash

# Label: Git Label
# Description: Prints Git label.
_git_label() {
  printf "[java_script]"
}

# Label: File Regex
# Description: Prints file regex.
_file_regex() {
  printf '^((?!min).)+.(js|erb|slim)$'
}

# Label: JavaScript Debugger
# Description: Detects JavaScript debug statements.
java_script_debugger() {
  local search_regex='^(?:(?!(.*//.+|.*/\*.+)).*debugger;)'
  _scan_code "$(_git_label)" "Debug statements detected" $(_file_regex) $search_regex
}

# Label: JavaScript Console
# Description: Detects JavaScript console statements.
java_script_console() {
  local search_regex='^(?:(?!(.*//.+|.*/\*.+)).*console.(count|dir|error|group.*|info|log|time.*|table|trace)\(.+\);)'
  _scan_code "$(_git_label)" "Console statements detected" $(_file_regex) $search_regex
}

# Label: JavaScript Alert
# Description: Detects JavaScript alert statements.
java_script_alert() {
  local search_regex='^(?:(?!(.*//.+|.*/\*.+)).*alert\(.+\);)'
  _scan_code "$(_git_label)" "Console statements detected" $(_file_regex) $search_regex
}

# Label: JavaScript Lint
# Description: Scans JavaScript code for poor style choices.
java_script_link_check() {
  if [[ -e "Gemfile" ]] && ag "jslint_on_rails" Gemfile > /dev/null; then
    printf "[java_script_lint]: Checking for errors...\n"

    local results=($(bundle exec rake jslint))

    if [[ "${results[*]}" == *"No JS errors found"* ]]; then
      printf "\n\033[32mNo JavaScript lint errors found.\033[m\n"
    else
      for line in ${results[*]}; do
        printf "$line\n"
      done

      return 1
    fi
  fi
}
