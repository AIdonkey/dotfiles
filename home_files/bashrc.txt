# General
alias ..="cd .."
alias ...="cd ../.."
alias c="clear"
alias h="history"
alias l="ls -alh"
alias l1="ls -1"
alias p='pwd | tr -d "\r\n" | pbcopy && echo "`pbpaste` (copied to clipboard)"'
alias o="open"
alias e="sublime"
alias home="cd $HOME"
alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"
alias bashs="exec $SHELL"

# Terminal Colors
#
# The color designators:
#  a  black
#  b  red
#  c  green
#  d  brown
#  e  blue
#  f  magenta
#  g  cyan
#  h  light grey
#  A  bold black, usually shows up as dark grey
#  B  bold red
#  C  bold green
#  D  bold brown, usually shows up as yellow
#  E  bold blue
#  F  bold magenta
#  G  bold cyan
#  H  bold light grey; looks like bright white
#  x  default foreground or background
#
# The order of the attributes are as follows:
#  1.   directory
#  2.   symbolic link
#  3.   socket
#  4.   pipe
#  5.   executable
#  6.   block special
#  7.   character special
#  8.   executable with setuid bit set
#  9.   executable with setgid bit set
#  10.  directory writable to others, with sticky bit
#  11.  directory writable to others, without sticky bit

# The default is "exfxcxdxbxegedabagacad"
export CLICOLOR=1
export LSCOLORS=cxfxcxdxbxegebabagacad

# Bash Colors
YELLOW="\[\033[0;33m\]"
CYAN="\[\033[0;36m\]"
GREY="\[\033[1;30m\]"
NORMAL="\e[0m"

# Bash Completion (http://bash-completion.alioth.debian.org)
if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi

# Command Prompt (http://jonisalonen.com/2012/your-bash-prompt-needs-this)
export PS1="\[\033[G\]$GREY[\t]$NORMAL[\u@\h]$CYAN\$(__git_ps1 \"[%s]\")$NORMAL[\w]> "

# Network
alias ipa='curl -s checkip.dyndns.org | grep -Eo "[0-9\.]+" | pbcopy && echo "`pbpaste` (copied to clipboard)"'
alias sniff="sudo ngrep -W byline -d 'en0' -t '^(GET|POST) ' 'tcp and port 80'"

# PostgreSQL (http://www.postgresql.org)
alias pgs="pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start"
alias pgq="pg_ctl -D /usr/local/var/postgres stop -s -m fast"

# Git (http://git-scm.com)
function groot() {
  cd "$(dirname $(git rev-parse --git-dir))"
}
alias gst="git status -sb"
alias glast="git show --stat"
alias gg="git grep"
alias gl="git log --oneline --decorate"
alias glh='git log --pretty=format:%H -1 | pbcopy && echo "`pbpaste` (copied to clipboard)"'
alias glc="git shortlog -sne"
alias gld="git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias gln="git log --name-status"
alias glf="git log ..FETCH_HEAD"

# Git Standup - Answers a summarized list of Git activity since yesterday for all projects in current directory,
# broken down by project. This is a great way to see what you did yesterday for today's standup report.
function gsup() {
  echo ''
  root_path=`pwd` # Remember current directory.

  # Iterate through all project directories located in root directory.
  for directory in `ls -d1 -- */`
  do
    # Process projects that are Git enabled only.
    cd "$root_path/$directory"
    if [ -d ".git" ]; then
      user=$(git config user.name)
      # Capture git log activity.
      results=$(git log --reverse --since yesterday --oneline --author "$user")
      # Print project name and Git activity only if Git activity was detected.
      if [ -n "$results" ]; then
        echo "[${directory/%?/}]"
        echo -e "$results\n"
      fi
    fi
  done

  cd "$root_path" # Return to original directory.
}

alias gd="git diff"
alias gdw="git diff --word-diff"
alias gdc="git diff --cached"
alias gwc="git whatchanged -p --pretty=medium"
alias glame="git blame"
alias gb="git branch -v"
alias gm="git merge"
alias gms="git merge --squash"
alias gcl="git clone"
alias gch="git checkout"
alias ga="git add"
alias gall="git add ."
alias gco="git commit"
alias gca="git commit -a"
alias gcam="git commit -a -m"
alias gamend="git commit --amend -m"
alias gash="git stash"
alias gashl="git stash list"
alias gashs="git stash show"
alias gashp="git stash pop"
alias gashd="git stash drop"
alias gashc="git stash clear"
alias gf="git fetch"
alias gpu="git pull"
alias gpur="git pull --rebase" # Rebase the current branch on top of the upstream branch after fetching
alias gp="git push"
alias gpo="git push origin"
alias gpp="git push production master"
alias gps="git push stage stage:master"
alias gtag="git tag"
alias gtags="git push --tags"
alias gres="git reset --hard HEAD"
alias grev="git revert"
alias glatest="git for-each-ref --sort=-committerdate refs/heads --format='%(committerdate:short) %(refname:short)'"

# GitHub (https://github.com)
# Function Source: https://gist.github.com/1105392
function init_github() {
  git remote add origin git@github.com:$1/$2.git
  git push origin master
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git config push.default current
}

# Ruby (http://www.ruby-lang.org)
# Reference: http://snaprails.tumblr.com/post/241746095/rubys-gc-configuration.
export RUBY_HEAP_MIN_SLOTS=500000 # Initial/minimum number of heap slots. Default: 10000.
export RUBY_HEAP_SLOTS_INCREMENT=250000 # The number of new slots to allocate when all initial slots are used. Default: 10000.
export RUBY_HEAP_SLOTS_GROWTH_FACTOR=1 # The multiplicator use when new heap slots are required (i.e. RUBY_HEAP_SLOTS_INCREMENT * RUBY_HEAP_SLOTS_GROWTH_FACTOR). Default: 1.8.
export RUBY_GC_MALLOC_LIMIT=50000000 # The number of C data structures that can be allocated before triggering the garbage collector. Default: 8000000.
export RUBY_HEAP_FREE_MIN=100000 # The number of free slots that should be present after GC finishes. If there are fewer slots than those defined it will allocate new ones according to RUBY_HEAP_SLOTS_INCREMENT and RUBY_HEAP_SLOTS_GROWTH_FACTOR parameters. Default: 4096.
alias rd="rdoc -a -o _doc"
alias rdo="open _doc/index.html"

# Ruby Gems (http://rubygems.org)
alias geml="gem list"
alias gemi="gem install"
alias gemup="gem update"
alias gemu="gem uninstall"
alias gemc="gem cleanup"
alias gems="gem server"

# Ruby Gems Whois (https://github.com/jnunemaker/gemwhois)
alias gemw="gem whois"

# Bundler (http://gembundler.com)
alias b="bundle"
alias bi="bundle install"
alias bu="bundle update"
alias bo="bundle outdated"
alias bcon="bundle console"
alias be="bundle exec"
alias ber="bundle exec rake"
alias bes="bundle exec rspec"
alias bess="bundle exec rspec spec"
alias bert="bundle exec rake test"
alias beg="bundle exec guard -c"
alias bch="rm -f Gemfile.lock; bundle check"
alias rebundle="bch; bundle package"

# Gemsmith (https://github.com/bkuhlmann/gemsmith)
alias g="gemsmith"
alias go="gemsmith -o"

# Heroku+ (https://github.com/bkuhlmann/heroku_plus)
alias hpas="hp -a -s"

# Ruby on Rails (http://rubyonrails.org)

# Rails New
# Builds a new rails app for given template selection.
# ==== Parameters
# * +name+ - Required. The name of the app to create.
# * +selection+ - Optional. The template to apply. Default: (prompts for choice).
function rew {
  # Set defaults.
  options=''

  # Template options.
  rails_setup_template_options="-d sqlite3 -J -T -f --skip-bundle -m https://raw.github.com/bkuhlmann/rails_setup_template/master/template.rb"

  # Bypass prompt if selection is supplied.
  if [ $2 ]; then
    if [ $2 = 2 ]; then
      options=$rails_setup_template_options
    fi
  # Otherwise, prompt for template when selection is unknown.
  else
    echo -e "Usage: rew NAME TEMPLATE"
    echo -e "\nAvailable Templates:"
    echo "  1. Rails Default Template"
    echo "  2. Rails Setup Template"
    while true; do
      read -p "Please pick one (or type 'q' to quit): " response
      case $response in
        '2')
          options=$rails_setup_template_options
          break;;
        'q')
          return;;
      esac
    done
  fi

  # Create new Rails app.
  echo "rails new $1 $options"
  rails new $1 $options
  echo
}

function sc {
  if [ -e script/rails ]; then
    script/rails console $@
  else
    script/console $@
  fi
}

function ss {
  if [ -e script/rails ]; then
    script/rails server $@
  else
    script/server $@
  fi
}

function sg {
  if [ -e script/rails ]; then
    script/rails generate $@
  else
    script/generate $@
  fi
}

function sdb {
  if [ -e script/rails ]; then
    script/rails dbconsole $@
  else
    script/dbconsole $@
  fi
}

alias scs="sc --sandbox"
alias sgc="sg controller"
alias sgm="sg model"
alias sgs="sg scaffold"
alias rdbd="rake db:drop"
alias rdbc="rake db:create"
alias rdbm="rake db:migrate"
alias rassp="rake assets:precompile"
alias rassc="rake assets:clean"
alias taild="tail -f log/development.log"
alias tailt="tail -f log/test.log"
alias res="touch tmp/restart.txt"
alias debug="rdebug -c"
alias rprofile="ruby-prof --printer=graph_html ./script/rails runner > profile.html"
alias rpaths="rake routes | sed -e "1d" -e "s,^[^/]*,,g" | awk '{print $1}' | sort | uniq"
alias erd="rake erd attributes=primary_keys,foreign_keys,timestamps,inheritance,content inheritance=true orientation=vertical filename=doc/design/models"
alias dmodels="railroady -l -i -a --all-columns -j -t -o doc/design/models.dot -M"
alias dcontrollers="railroady -l -i -o doc/design/controllers.dot -C"
alias dstate="railroady -l -i -o doc/design/state.dot -A"

# Capistrano (https://github.com/capistrano/capistrano)
alias bec="bundle exec cap"
alias caps="bundle exec cap stage deploy"
alias capp="bundle exec cap production deploy"

# Sitemap Generator (https://github.com/kjvarga/sitemap_generator)
alias rsite="rake sitemap:refresh:no_ping"
alias rsitep="rake sitemap:refresh"

# Default Editor
export EDITOR=sublime

# rbenv (https://github.com/sstephenson/rbenv)
if [ -d /usr/local/bin ]; then
  export PATH="/usr/local/bin:$PATH" # OSX
fi

if [ -d $HOME/.rbenv/bin ]; then
  export PATH="$HOME/.rbenv/bin:$PATH" # Ubuntu
fi

eval "$(rbenv init -)"

alias rb="rbenv"
alias rbg="rbenv global"
alias rbl="rbenv local"
alias rbs="rbenv shell"
alias rbh="rbenv rehash"
alias rbp="rbenv which"
alias rbw="rbenv whence"
alias rbv="rbenv versions"
alias rbu="rbenv uninstall"
