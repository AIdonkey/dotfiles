# BASH PROMPT

# The following was inspired by the original Powerline port by Riobard Zhan (https://github.com/riobard/bash-powerline).

__powerline() {
  # Unicode symbols
  readonly PS_SYMBOL_DARWIN=''
  readonly PS_SYMBOL_LINUX='$'
  readonly PS_SYMBOL_OTHER='%'
  readonly GIT_BRANCH_SYMBOL='⑂'
  readonly GIT_BRANCH_CHANGED_SYMBOL='+'
  readonly GIT_NEED_PUSH_SYMBOL='⇡'
  readonly GIT_NEED_PULL_SYMBOL='⇣'

  # Determine OS
  case "$(uname)" in
    Darwin)
      readonly PS_SYMBOL=$PS_SYMBOL_DARWIN
      ;;
    Linux)
      readonly PS_SYMBOL=$PS_SYMBOL_LINUX
      ;;
    *)
      readonly PS_SYMBOL=$PS_SYMBOL_OTHER
  esac

  __git_info() {
    [ -x "$(which git)" ] || return    # git not found

    # get current branch name or short SHA1 hash for detached head
    local branch="$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)"
    [ -n "$branch" ] || return  # git branch not found

    local marks

    # branch is modified?
    [ -n "$(git status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

    # how many commits local branch is ahead/behind of remote?
    local stat="$(git status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
    local aheadN="$(echo $stat | grep -o 'ahead \d\+' | grep -o '\d\+')"
    local behindN="$(echo $stat | grep -o 'behind \d\+' | grep -o '\d\+')"
    [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
    [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

    # print the git branch segment without a trailing newline
    printf " $GIT_BRANCH_SYMBOL $branch$marks "
  }

  ps1() {
    # Check the exit code of the previous command and display different
    # colors in the prompt accordingly.
    if [ $? -eq 0 ]; then
      local BG_EXIT="$GREEN_BACKGROUND"
    else
      local BG_EXIT="$RED_BACKGROUND"
    fi

    PS1="\[$BLACK\]\[$WHITE_BACKGROUND\] \t \[$NORMAL\]" # Date/time.
    PS1+="\[$BLACK\]\[$SILVER_BACKGROUND\] \u@\h \[$NORMAL\]" # User at host.
    PS1+="\[$BLACK\]\[$WHITE_BACKGROUND\] ${PWD##*/} \[$NORMAL\]" # Directory.

    if [[ -d .git ]]; then
      PS1+="\[$BLACK\]\[$CYAN_BACKGROUND\] $(gail) \[$NORMAL\]" # Email.
      PS1+="\[$BLUE_BACKGROUND\]$(__git_info)\[$NORMAL\]" # Git Info.
    fi

    PS1+="\[$BG_EXIT\] $PS_SYMBOL \[$NORMAL\] "
  }

  PROMPT_COMMAND=ps1
}

__powerline
unset __powerline
