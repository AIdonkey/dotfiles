# BASH FUNCTIONS (private)

#------------------------------------#
# Section: [Git](http://git-scm.com) #
#------------------------------------#

# Label: Git Commits Since Last Tag
# Description: Answers commit history since last tag for project.
function _git_commits_since_last_tag() {
  if [[ "$(git tag)" ]]; then
    git log --oneline --format='%C(yellow)%H%Creset %s' --reverse $(git describe --abbrev=0 --tags)..HEAD
  fi
}

# Label: Git Stash
# Description: Enhances default git stash behavior by prompting for input (multiple) or using last stash (single).
# Parameters: $1 (required) - The git stash command to execute, $2 (required) - The prompt label (for multiple stashes).
function _process_git_stash() {
  # Convert arguments into readable variables.
  local stash_command="$1"
  local prompt_label="$2"

  # Store original line break setting and temporarily switch to using new line characters instead.
  local ifs_original=$IFS
  IFS=$'\n'

  # Store existing stashes (if any) as an array. See the public, "gashl" function for details.
  stashes=($(gashl))

  # Ask which stash to show when multiple stashes are detected, otherwise show the existing stash.
  if [[ "${#stashes[*]}" -gt '1' ]]; then
    printf "\n$prompt_label:\n"
    for ((index = 0; index < ${#stashes[*]}; index++)); do
      printf "  $index: ${stashes[$index]}\n"
    done
    printf "  q: Quit/Exit.\n\n"

    read -p "Enter selection: " response
    local match="^[0-9]{1}$"
    if [[ "$response" =~ $match ]]; then
      printf "\n"
      git stash $stash_command "stash@{$response}"
      printf "\n"
    fi
  else
    git stash $stash_command
  fi

  # Restore original line break setting.
  ISF=$ifs_original
}

#---------------------------------------#
# Section: [GitHub](https://github.com) #
#---------------------------------------#

# Label: GitHub URL
# Description: Answers the GitHub URL for current project.
function _gh_url() {
  git remote -v | \
    grep git@github.com | \
    grep fetch | \
    head -1 | \
    cut -f2 | \
    cut -d' ' -f1 | \
    sed -e's/:/\//' -e 's/git@/https:\/\//' -e 's/\.git//' | \
    pbcopy && printf "$(pbpaste) (copied to clipboard)\n"
}

# Label: Process GitHub Option
# Description: Processes option selection for viewing the remote GitHub repository.
# Parameters: $1 (optional) - The option selection, $2 (optional) - The option input.
function _process_gh_option() {
  case $1 in
    'o')
      open $(_gh_url)
      break;;
    'c')
      if [[ "$2" ]]; then
        open "$(_gh_url)/commit/$2"
      else
        open "$(_gh_url)/commits"
      fi
      break;;
    'b')
      open "$(_gh_url)/branches"
      break;;
    't')
      open "$(_gh_url)/tags"
      break;;
    'p')
      open "$(_gh_url)/pulls"
      break;;
    'u')
      _gh_url
      break;;
    'q')
      break;;
    *)
      printf "ERROR: Invalid option."
      break;;
  esac
}

#--------------------------------------------------#
# Section: [Ruby on Rails](http://rubyonrails.org) #
#--------------------------------------------------#

# Label: Run Rails Command
# Description: Runs a Rails command with smart detection of current environment.
# Parameters: $1 (required) - The command to run, $2(optional) - Additional arguments
function _run_rails_command() {
  local rails_command=$1
  local rails_options=$2

  # Rails 4.x.x.
  if [[ -e bin/rails ]]; then
    bin/rails $rails_command $rails_options
  # Rails 3.x.x.
  elif [[ -e script/rails ]]; then
    script/rails $rails_command $rails_options
  # Rails 2.x.x.
  elif [[ -e script/$rails_command ]]; then
    script/$rails_command $rails_options
  # Unsupported version.
  else
    printf "ERROR: Unsupported Rails version.\n"
  fi
}

# Label: Create Rails Skeleton
# Description: Creates a new rails applications skeleton.
# Parameters: $1 (required) - The application name, $2 (optional) - The build options to apply.
function _create_rails_skeleton() {
  printf "rails new $1 $2\n"
  rails new $1 $2
}

function _create_rails_engine_skeleton() {
  printf "rails plugin new $1 $2\n"
  rails plugin new $1 $2
}

# Label: Process Rew Option
# Description: Processes option selection for constructing new Rails application skeletons with custom build settings.
# Parameters: $1 (required) - The application name, $2 (required) - The template to apply.
function _process_rew_option() {
  local flags="--skip-bundle --database sqlite3 --skip-test-unit --force --skip-keeps --template"
  local rails_slim_remote_options="$flags https://raw.github.com/bkuhlmann/rails_slim_template/master/template.rb"
  local rails_slim_local_options="$flags $HOME/Dropbox/Development/Projects/rails_slim_template/template.rb"
  local rails_setup_remote_options="$flags https://raw.github.com/bkuhlmann/rails_setup_template/master/template.rb"
  local rails_setup_local_options="$flags $HOME/Dropbox/Development/Projects/rails_setup_template/template.rb"
  local engine_options="--skip-bundle --skip-test-unit --force --skip-keeps --mountable --dummy-path=spec/dummy"

  case $2 in
    1)
      _create_rails_skeleton "$1"
      break;;
    2)
      _create_rails_skeleton "$1" "$rails_slim_remote_options"
      break;;
    3)
      _create_rails_skeleton "$1" "$rails_slim_local_options"
      break;;
    4)
      _create_rails_skeleton "$1" "$rails_setup_remote_options"
      break;;
    5)
      _create_rails_skeleton "$1" "$rails_setup_local_options"
      break;;
    6)
      _create_rails_engine_skeleton "$1" "$engine_options"
      break;;
    'q')
      break;;
    *)
      printf "ERROR: Invalid option.\n"
      break;;
  esac
}

#-------------------#
# Section: Dotfiles #
#-------------------#

function _print_section() {
  if [[ "$1" == "# Section:"* ]]; then
    local section=$(printf "$1" | sed 's/# Section://' | sed 's/^ *//g' | tr -d '#')
    printf "##### $section\n"
  fi
}

function _print_alias() {
  echo "$1" | sed 's/alias //' | sed 's/="/ = "/' | sed "s/='/ = '/"
}

function _print_aliases() {
  while read line; do
    _print_section "$line"

    if [[ "$line" == "alias"* ]]; then
      printf "    "
      _print_alias "$line"
    fi
  done < "$HOME/.bash_aliases"
}

function _print_function_name() {
  local name=$(printf "$1" | sed 's/function //' | sed 's/() {//')
  printf "$name = $2 - $3\n"
}

function _set_function_label() {
  if [[ "$1" == "# Label:"* ]]; then
    label=$(printf "$1" | sed 's/# Label://' | sed 's/^ *//g')
  fi
}

function _set_function_description() {
  if [[ "$line" == "# Description:"* ]]; then
    description=$(printf "$line" | sed 's/# Description://' | sed 's/^ *//g')
  fi
}

function _print_functions() {
  while read line; do
    _print_section "$line"
    _set_function_label "$line"
    _set_function_description "$line"

    if [[ "$line" == "function"*"() {" && "$line" != "function _"* ]]; then
      printf "    "
      _print_function_name "$line" "$label" "$description"
      unset label
      unset description
    fi
  done < "$HOME/.bash_functions-public"
}

function _find_alias() {
  while read line; do
    if [[ "$line" == "alias "*"$1"* ]]; then
      printf "    Alias: "
      _print_alias "$line"
    fi
  done < "$HOME/.bash_aliases"
}

function _find_function() {
  while read line; do
    _set_function_label "$line"
    _set_function_description "$line"

    if [[ "$line" == "function "*"$1"* ]]; then
      printf "    Function: "
      _print_function_name "$line" "$label" "$description"
      unset label
      unset description
    fi
  done < "$HOME/.bash_functions-public"
}

function _find_command() {
  if [[ "$1" ]]; then
    printf "\"$1\" Search Results:\n"

    _find_alias "$1"
    _find_function "$1"
  else
    printf "ERROR: Nothing to search for. Criteria must be supplied.\n"
  fi
}

# Label: Process Dotfiles Option
# Description: Processes option selection for learning about dotfile aliases/functions.
# Parameters: $1 (optional) - The option selection, $2 (optional) - The option input.
function _process_dots_option() {
  case $1 in
    'a')
      _print_aliases | more
      break;;
    'f')
      _print_functions | more
      break;;
    's')
      _find_command "$2" | more
      break;;
    'q')
      break;;
    *)
      printf "ERROR: Invalid option.\n"
      break;;
  esac
}
