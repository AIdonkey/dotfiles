#!/usr/bin/env ruby

# Requirements
require "irb/completion"
require "irb/ext/save-history"

# IRB Defaults
IRB.conf[:AUTO_INDENT] = true
IRB.conf[:SAVE_HISTORY] = 1000
IRB.conf[:EVAL_HISTORY] = 1000
IRB.conf[:HISTORY_FILE] = "#{ENV['HOME']}/.irb_history"
IRB.conf[:PROMPT] ||= {}
IRB.conf[:PROMPT][:RA] = {
  PROMPT_I: "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}]> ",
  PROMPT_N: "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}]| ",
  PROMPT_C: "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}]| ",
  PROMPT_S: "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}]%l ",
  RETURN: "=> %s\n"
}
IRB.conf[:PROMPT_MODE] = :RA

# IRB for Rails 2.x.x
if ENV.include?("RAILS_ENV") && !Object.const_defined?("RAILS_DEFAULT_LOGGER")

  # Prompt
  require "logger"
  RAILS_DEFAULT_LOGGER = Logger.new STDOUT
  IRB.conf[:PROMPT][:RA][:PROMPT_I] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{ENV["RAILS_ENV"]}]> "
  IRB.conf[:PROMPT][:RA][:PROMPT_N] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{ENV["RAILS_ENV"]}]| "
  IRB.conf[:PROMPT][:RA][:PROMPT_C] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{ENV["RAILS_ENV"]}]| "
  IRB.conf[:PROMPT][:RA][:PROMPT_S] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{ENV["RAILS_ENV"]}]%l "

# IRB for Rails 3.x.x
elsif defined?(Rails)

  # Prompt
  require "logger"
  Rails.logger = Logger.new STDOUT
  IRB.conf[:PROMPT][:RA][:PROMPT_I] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{Rails.application.class.parent_name.downcase}|#{Rails.env}]> "
  IRB.conf[:PROMPT][:RA][:PROMPT_N] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{Rails.application.class.parent_name.downcase}|#{Rails.env}]| "
  IRB.conf[:PROMPT][:RA][:PROMPT_C] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{Rails.application.class.parent_name.downcase}|#{Rails.env}]| "
  IRB.conf[:PROMPT][:RA][:PROMPT_S] = "[#{RUBY_VERSION}p#{RUBY_PATCHLEVEL}|#{Rails.application.class.parent_name.downcase}|#{Rails.env}]%l "

  # ActionController
  ActionController::Base.logger = Logger.new STDOUT
end

# Gem Enhancements (requirements)
%w(wirb hirb awesome_print pry pry-debugger pry-remote pry-stack_explorer pry-vterm_aliases).each do |gem|
  begin
    require gem
  rescue LoadError
    STDERR.puts "Unable to load #{gem}: #{$!}"
  end
end

# Gem Enhancements (settings)
%w(Wirb.start Hirb.enable).each do |config|
  begin
    instance_eval config
  rescue NoMethodError
    STDERR.puts "Unable to execute #{config}: #{$!}"
  end
end

# Red Alchemist Utilities
class RA
  # Copies input to the Mac OS clipboard seperated by a new line.
  # ==== Parameters
  # * +args+ - The single or multiple inputs to send to the clipboard.
  def self.copy *args
    open("| pbcopy", 'w') {|clipboard| clipboard << args.join("\n")}
  end

  # Pastes recent content from the Mac OS clipboard.
  def self.paste
    `pbpaste`
  end
end
